#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>

// for sleep
#include <unistd.h>

#define BUFF_SIZE   2           /* total number of slots */
#define NP          1           /* total number of producers */
#define NC          1           /* total number of consumers */
#define NITERS      10           /* number of items produced/consumed */

typedef struct
{
    int buf[BUFF_SIZE];   /* shared var */
    int in;               /* buf[in%BUFF_SIZE] is the first empty slot */
    int out;              /* buf[out%BUFF_SIZE] is the first full slot */
    sem_t full;           /* keep track of the number of full spots */
    sem_t empty;          /* keep track of the number of empty spots */

    // use correct type here
    pthread_mutex_t mutex;          /* enforce mutual exclusion to shared data */
} sbuf_t;

sbuf_t shared;


void *Producer(void *arg)
{
    int i, item, index;

    index = (int)arg;


    for (i=0; i < NITERS; i++)
    {
        int j = 0;
         /* If another thread uses the buffer, wait */
        pthread_mutex_lock(&shared.mutex);
        while(j < 100000){
            j++;
        }
        pthread_mutex_unlock(&shared.mutex);
        
    //    sleep(1);

    }
    return NULL;
}

void *Consumer(void *arg)
{
  int i, item, index;
    for (i=NITERS; i > 0; i--) {
         int j = 0;
        pthread_mutex_lock(&shared.mutex);
        while(j < 100000){
            j++;
        }
        pthread_mutex_unlock(&shared.mutex);
        //sleep(1);
    }
    return NULL;
}

int main()
{
    pthread_t idP, idC;
    int index;

    sem_init(&shared.full, 0, 0);
    sem_init(&shared.empty, 0, BUFF_SIZE);
    pthread_mutex_init(&shared.mutex, NULL);
    for (index = 0; index < NP; index++)
    {
        /* Create a new producer */
        pthread_create(&idP, NULL, Producer, (void*)index);
    }
    /*create a new Consumer*/
    for(index=0; index<NC; index++)
    {
        pthread_create(&idC, NULL, Consumer, (void*)index);
    }



    pthread_exit(NULL);
}
